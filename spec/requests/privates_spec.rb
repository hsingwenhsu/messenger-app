 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/privates", type: :request do
  
  # Private. As you add validations to Private, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {:admin_id1 => @admin1.id, :admin_id2 => @admin2.id}

  }

  before(:each) do
    @admin1 = Admin.create!({
      :email => 'test@columbia.edu',
      :full_name => 'test',
      :uid => '',
      :avatar_url => ''
    })
    @admin2 = Admin.create!({
      :email => 'test2@columbia.edu',
      :full_name => 'test2',
      :uid => '',
      :avatar_url => ''
    })
    Capybara.default_host = 'localhost:3000'
    default_url_options[:host] = 'localhost:3000'
    login_as(@admin1, :scope => :admin)
    current_admin = @admin1
  end

  # describe "GET /index" do
  #   it "renders a successful response" do
  #     Private.create! valid_attributes
  #     get privates_url
  #     expect(response).to be_successful
  #   end
  # end

  describe "GET /show" do
    it "renders a successful response" do
      private = Private.create! valid_attributes
      get private_url(private)
      expect(response).to be_successful
    end
  end

  # describe "GET /new" do
  #   it "renders a successful response" do
  #     get new_private_url
  #     expect(response).to be_successful
  #   end
  # end

  # describe "GET /edit" do
  #   it "render a successful response" do
  #     private = Private.create! valid_attributes
  #     get edit_private_url(private)
  #     expect(response).to be_successful
  #   end
  # end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Private" do
        expect {
          post privates_url, params: { private: valid_attributes }
        }.to change(Private, :count).by(1)
      end

      it "redirects to the created private" do
        post privates_url, params: { private: valid_attributes }
        expect(response).to redirect_to(private_url(Private.last))
      end
    end

    # context "with invalid parameters" do
    #   it "does not create a new Private" do
    #     expect {
    #       post privates_url, params: { private: invalid_attributes }
    #     }.to change(Private, :count).by(0)
    #   end

    #   it "renders a successful response (i.e. to display the 'new' template)" do
    #     post privates_url, params: { private: invalid_attributes }
    #     expect(response).to be_successful
    #   end
    # end
  end

  # describe "PATCH /update" do
  #   context "with valid parameters" do
  #     let(:new_attributes) {
  #       skip("Add a hash of attributes valid for your model")
  #     }

  #     it "updates the requested private" do
  #       private = Private.create! valid_attributes
  #       patch private_url(private), params: { private: new_attributes }
  #       private.reload
  #       skip("Add assertions for updated state")
  #     end

  #     it "redirects to the private" do
  #       private = Private.create! valid_attributes
  #       patch private_url(private), params: { private: new_attributes }
  #       private.reload
  #       expect(response).to redirect_to(private_url(private))
  #     end
  #   end

  #   context "with invalid parameters" do
  #     it "renders a successful response (i.e. to display the 'edit' template)" do
  #       private = Private.create! valid_attributes
  #       patch private_url(private), params: { private: invalid_attributes }
  #       expect(response).to be_successful
  #     end
  #   end
  # end

  # describe "DELETE /destroy" do
  #   it "destroys the requested private" do
  #     private = Private.create! valid_attributes
  #     expect {
  #       delete private_url(private)
  #     }.to change(Private, :count).by(-1)
  #   end

  #   it "redirects to the privates list" do
  #     private = Private.create! valid_attributes
  #     delete private_url(private)
  #     expect(response).to redirect_to(privates_url)
  #   end
  # end
end
