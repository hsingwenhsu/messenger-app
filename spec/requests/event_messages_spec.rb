 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/event_messages", type: :request do
  
  # EventMessage. As you add validations to EventMessage, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    # skip("Add a hash of attributes valid for your model")
    {
      :admin_id => @admin.id,
      :event_id => @event.id,
      :content => 'Hi'
    }
  }

  let(:invalid_attributes) {
    # skip("Add a hash of attributes invalid for your model")
    {
      :admin_id => @admin.id + 1,
      :event_id => @event.id + 1,
      :content => 'Hi'
    }
  }

  before(:each) do
    @admin = Admin.create!({
      :email => 'test@columbia.edu',
      :full_name => 'test',
      :uid => '',
      :avatar_url => ''
    })
    @event = Event.create!({
      :title => 'Final Discussion'
    })
    login_as(@admin, :scope => :admin)
  end

  describe "GET /index" do
    it "renders a successful response" do
      EventMessage.create! valid_attributes
      get event_messages_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      event_message = EventMessage.create! valid_attributes
      get event_message_url(event_message)
      expect(response).to be_successful
    end
  end

  # describe "GET /new" do
  #   it "renders a successful response" do
  #     get new_event_message_url
  #     expect(response).to be_successful
  #   end
  # end

  # describe "GET /edit" do
  #   it "render a successful response" do
  #     event_message = EventMessage.create! valid_attributes
  #     get edit_event_message_url(event_message)
  #     expect(response).to be_successful
  #   end
  # end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new EventMessage" do
        expect {
          post event_messages_url, params: { event_message: valid_attributes }
        }.to change(EventMessage, :count).by(1)
      end

      # it "redirects to the created event_message" do
      #   post event_messages_url, params: { event_message: valid_attributes }
      #   expect(response).to redirect_to(event_message_url(EventMessage.last))
      # end
    end

    context "with invalid parameters" do
      it "does not create a new EventMessage" do
        expect {
          post event_messages_url, params: { event_message: invalid_attributes }
        }.to raise_error(ActiveRecord::InvalidForeignKey)
      end

      # it "renders a successful response (i.e. to display the 'new' template)" do
      #   post event_messages_url, params: { event_message: invalid_attributes }
      #   expect(response).to be_successful
      # end
    end
  end

  # describe "PATCH /update" do
  #   context "with valid parameters" do
  #     let(:new_attributes) {
  #       # skip("Add a hash of attributes valid for your model")
  #       {
  #         :admin_id => @admin.id,
  #         :event_id => @event.id,
  #         :content => 'Hello'
  #       }
  #     }

  #     it "updates the requested event_message" do
  #       event_message = EventMessage.create! valid_attributes
  #       patch event_message_url(event_message), params: { event_message: new_attributes }
  #       event_message.reload
  #       # skip("Add assertions for updated state")
  #       expect(event_message.content).to eq('Hello')
  #     end

  #     it "redirects to the event_message" do
  #       event_message = EventMessage.create! valid_attributes
  #       patch event_message_url(event_message), params: { event_message: new_attributes }
  #       event_message.reload
  #       expect(response).to redirect_to(event_message_url(event_message))
  #     end
  #   end

  #   context "with invalid parameters" do
  #     it "renders a successful response (i.e. to display the 'edit' template)" do
  #       event_message = EventMessage.create! valid_attributes
  #       patch event_message_url(event_message), params: { event_message: invalid_attributes }
  #       expect(response).to be_successful
  #     end
  #   end
  # end

  # describe "DELETE /destroy" do
  #   it "destroys the requested event_message" do
  #     event_message = EventMessage.create! valid_attributes
  #     expect {
  #       delete event_message_url(event_message)
  #     }.to change(EventMessage, :count).by(-1)
  #   end

  #   it "redirects to the event_messages list" do
  #     event_message = EventMessage.create! valid_attributes
  #     delete event_message_url(event_message)
  #     expect(response).to redirect_to(event_messages_url)
  #   end
  # end
end
