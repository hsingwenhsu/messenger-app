 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/posts", type: :request do
  
  # Post. As you add validations to Post, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    # skip("Add a hash of attributes valid for your model")
    {
      :admin_id => @admin.id,
      :room_id => @room.id,
      :title => 'Please extend the deadline!!!',
      :content => 'As title :((('
    }
  }

  let(:invalid_attributes) {
    # skip("Add a hash of attributes invalid for your model")
    {
      :admin_id => @admin.id + 1,
      :room_id => @room.id + 1,
      :title => 'Please extend the deadline!!!',
      :content => 'As title :((('
    }
  }

  before(:each) do
    @admin = Admin.create!({
      :email => 'test@columbia.edu',
      :full_name => 'test',
      :uid => '',
      :avatar_url => ''
    })
    @room = Room.create!({
      :name => 'ESaaS'
    })
    login_as(@admin, :scope => :admin)
  end

  describe "GET /index" do
    it "renders a successful response" do
      Post.create! valid_attributes
      get room_posts_url(@room)
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      post = Post.create! valid_attributes
      get room_post_url(@room, post)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_room_post_url(@room)
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      post = Post.create! valid_attributes
      get edit_room_post_url(@room, post)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Post" do
        expect {
          post room_posts_url(@room), params: { post: valid_attributes }
        }.to change(Post, :count).by(1)
      end

      it "redirects to the created post" do
        post room_posts_url(@room), params: { post: valid_attributes }
        expect(response).to redirect_to(room_post_url(@room, Post.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Post" do
        expect {
          post room_posts_url(@room), params: { post: invalid_attributes }
        }.to raise_error(ActiveRecord::InvalidForeignKey)
      end

      # it "renders a successful response (i.e. to display the 'new' template)" do
      #   post room_posts_url(@room), params: { post: invalid_attributes }
      #   expect(response).to be_successful
      # end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        # skip("Add a hash of attributes valid for your model")
        {
          :admin_id => @admin.id,
          :room_id => @room.id,
          :title => 'Re: Please extend the deadline!!!',
          :content => 'No way :((('
        }
      }

      it "updates the requested post" do
        post = Post.create! valid_attributes
        patch room_post_url(@room, post), params: { post: new_attributes }
        post.reload
        # skip("Add assertions for updated state")
        expect(post.title).to eq('Re: Please extend the deadline!!!')
        expect(post.content).to eq('No way :(((')
      end

      it "redirects to the post" do
        post = Post.create! valid_attributes
        patch room_post_url(@room, post), params: { post: new_attributes }
        post.reload
        expect(response).to redirect_to(room_post_url(@room, post))
      end
    end

    # context "with invalid parameters" do
    #   it "renders a successful response (i.e. to display the 'edit' template)" do
    #     post = Post.create! valid_attributes
    #     patch room_post_url(@room, post), params: { post: invalid_attributes }
    #     expect(response).to be_successful
    #   end
    # end
  end

  describe "DELETE /destroy" do
    it "destroys the requested post" do
      post = Post.create! valid_attributes
      expect {
        delete room_post_url(@room, post)
      }.to change(Post, :count).by(-1)
    end

    it "redirects to the posts list" do
      post = Post.create! valid_attributes
      delete room_post_url(@room, post)
      expect(response).to redirect_to(room_posts_url(@room))
    end
  end
end
